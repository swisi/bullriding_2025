name: Build (Nuitka) – manual (Windows/PowerShell)

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: Python-Version
        type: string
        default: "3.12"
      entrypoint:
        description: Pfad zu deinem Python-Entry (z. B. src/app.py)
        type: string
        default: "src/app.py"
      onefile:
        description: Einzelne Datei (--onefile)
        type: boolean
        default: true
      standalone:
        description: Standalone inkl. Runtime (--standalone)
        type: boolean
        default: true
      output-name:
        description: Dateiname ohne Pfad (z. B. app.exe)
        type: string
        default: "app.exe"
      upload-release:
        description: Artefakt zusätzlich an ein GitHub-Release anhängen (benötigt Tag-Ref)
        type: boolean
        default: false

jobs:
  nuitka-build:
    name: Nuitka Build (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      # Optional: Cache für pip (falls requirements.txt existiert)
      - name: Cache pip
        if: hashFiles('requirements.txt') != ''
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ inputs.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (PowerShell)
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install nuitka

      - name: Build with Nuitka (PowerShell)
        run: |
          $flags = ""
          if ("${{ inputs.onefile }}" -eq "true") { $flags += " --onefile" }
          if ("${{ inputs.standalone }}" -eq "true") { $flags += " --standalone" }

          # Sinnvolle Defaults
          $flags += " --follow-imports --output-dir=dist"

          $entry = "${{ inputs.entrypoint }}"
          $outName = "${{ inputs.output-name }}"
          if ([string]::IsNullOrWhiteSpace($outName)) { $outName = "app.exe" }

          Write-Host "Nuitka Flags:$flags"
          Write-Host "Entry: $entry"
          Write-Host "Output: $outName"

          python -m nuitka $flags --output-filename="$outName" "$entry"

          Write-Host "dist-Inhalt:"
          Get-ChildItem -Recurse -Force dist | Format-Table -AutoSize

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuitka-windows-${{ inputs.python-version }}
          path: |
            dist/**
          if-no-files-found: error

  release:
    name: (Optional) Release anhängen
    needs: nuitka-build
    if: ${{ inputs.upload-release == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuitka-windows-${{ inputs.python-version }}
          path: dist

      - name: Prüfen, ob Tag vorhanden ist
        id: tagcheck
        run: |
          REF="${GITHUB_REF##*/}"
          echo "ref=$REF" >> $GITHUB_OUTPUT
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            echo "Kein Tag auf der aktuellen Ref. Bitte mit Tag auslösen (z. B. v1.2.3)." >&2
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
