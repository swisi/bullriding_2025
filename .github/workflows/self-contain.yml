name: Build (Nuitka) – manual (Windows/PowerShell)

on:
  workflow_dispatch:
    inputs:
      python-version:
        description: Python-Version
        type: string
        default: "3.12"
      project-dir:
        description: Repo-Ordner, in dem dein Code liegt (z. B. . oder backend)
        type: string
        default: "."
      entrypoint:
        description: Pfad zum Python-Entry relativ zu project-dir (z. B. src/app.py)
        type: string
        default: "./app.py"
      onefile:
        description: Einzelne Datei (--onefile)
        type: boolean
        default: true
      standalone:
        description: Standalone inkl. Runtime (--standalone)
        type: boolean
        default: true
      output-name:
        description: Dateiname ohne Pfad (z. B. app.exe)
        type: string
        default: "app.exe"
      upload-release:
        description: Artefakt zusätzlich an ein GitHub-Release anhängen (benötigt Tag-Ref)
        type: boolean
        default: false

jobs:
  nuitka-build:
    name: Nuitka Build (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs['python-version'] }}

      - name: Cache pip (Windows)
        if: hashFiles('**/requirements.txt') != ''
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ github.event.inputs['python-version'] }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (PowerShell)
        shell: pwsh
        working-directory: ${{ github.workspace }}\${{ github.event.inputs['project-dir'] }}
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install nuitka

      - name: Validate entrypoint (PowerShell, mit Auto-Suche)
        shell: pwsh
        working-directory: ${{ github.workspace }}\${{ github.event.inputs['project-dir'] }}
        run: |
          $entryRel = "${{ github.event.inputs.entrypoint }}"
          $entryAbs = Resolve-Path -LiteralPath $entryRel -ErrorAction SilentlyContinue

          if (-not $entryAbs) {
            Write-Host "Entrypoint '$entryRel' nicht gefunden. Starte Auto-Suche nach Kandidaten..."
            # Kandidatenliste
            $candidateNames = @('app.py','main.py','wsgi.py','server.py','run.py')

            # Verzeichnisse ausschliessen
            $excludePatterns = @('\.git', '\.venv', 'env', 'venv', 'node_modules', 'migrations', '\.mypy_cache', '\.pytest_cache')

            $allFiles = Get-ChildItem -Recurse -File -Depth 8 2>$null
            $filtered = $allFiles | Where-Object {
              $nameMatch = $candidateNames -contains $_.Name
              if (-not $nameMatch) { return $false }
              $full = $_.FullName
              # Ausschlüsse anwenden
              $isExcluded = $false
              foreach ($pat in $excludePatterns) {
                if ($full -match $pat) { $isExcluded = $true; break }
              }
              return -not $isExcluded
            }

            if ($filtered.Count -eq 1) {
              $entryAbs = $filtered[0].FullName
              Write-Host "Genau ein Kandidat gefunden: $entryAbs"
            } elseif ($filtered.Count -gt 1) {
              Write-Host "Mehrere mögliche Entrypoints gefunden:"
              $filtered | ForEach-Object { Write-Host " - $($_.FullName)" }
              throw "Mehrdeutig. Bitte gib 'project-dir' und 'entrypoint' explizit an."
            } else {
              Write-Host ">>> Inhalt (Top 3 Ebenen) zur Diagnose:"
              Get-ChildItem -Recurse -Depth 3 | Select-Object FullName | Format-Table -AutoSize
              throw "Kein Entrypoint gefunden. Bitte 'project-dir' und 'entrypoint' prüfen."
            }
          }

          "ENTRY_ABS=$entryAbs" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Verwende Entrypoint: $entryAbs"

      - name: Build with Nuitka (PowerShell)
        shell: pwsh
        working-directory: ${{ github.workspace }}\${{ github.event.inputs['project-dir'] }}
        run: |
          $flags = @()

          # onefile bevorzugt; sonst standalone wenn gewünscht
          if ("${{ github.event.inputs.onefile }}" -eq "true") {
            $flags += "--onefile"
          } elseif ("${{ github.event.inputs.standalone }}" -eq "true") {
            $flags += "--standalone"
          }

          # sinnvolle Defaults
          $flags += "--follow-imports"
          $flags += "--output-dir=dist"

          $outName = "${{ github.event.inputs['output-name'] }}"
          if ([string]::IsNullOrWhiteSpace($outName)) { $outName = "app.exe" }

          Write-Host "Nuitka Flags: $($flags -join ' ')"
          Write-Host "Entry: $env:ENTRY_ABS"
          Write-Host "Output: $outName"

          python -m nuitka @flags --output-filename="$outName" "$env:ENTRY_ABS"

          Write-Host "dist-Inhalt:"
          Get-ChildItem -Recurse -Force dist | Format-Table -AutoSize

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuitka-windows-${{ github.event.inputs['python-version'] }}
          path: dist/**
          if-no-files-found: error

  release:
    name: (Optional) Release anhängen
    needs: nuitka-build
    if: ${{ github.event.inputs.upload-release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuitka-windows-${{ github.event.inputs['python-version'] }}
          path: dist

      - name: Prüfen, ob Tag vorhanden ist
        id: tagcheck
        shell: bash
        run: |
          REF="${GITHUB_REF##*/}"
          echo "ref=$REF" >> "$GITHUB_OUTPUT"
          if [[ "$GITHUB_REF" != refs/tags/* ]]; then
            echo "Kein Tag auf der aktuellen Ref. Bitte mit Tag auslösen (z. B. v1.2.3)." >&2
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
